{"version":3,"sources":["Components/Firebase/context.js","Components/Firebase/firebase.js","Components/Home/MovieCard.js","Components/Home/MovieCollection.js","Components/MovieDB/context.js","Constants/constants.js","Components/MovieDB/movieDb.js","Components/Home/SearchBar.js","Components/Home/SearchResults.js","Components/Home/home.js","Components/App.js","serviceWorker.js","index.js"],"names":["FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurmentID","REACT_APP_MEASUREMENT_ID","Firebase","user","uid","db","ref","getCollectionRef","child","getMovieRef","movieID","addMovieToCollection","title","overview","release_date","set","removeMovieFromCollection","remove","app","initializeApp","this","database","id","movie","inCollection","Card","className","Body","Title","Subtitle","Text","Button","variant","onClick","movieCollection","keys","Object","length","map","key","i","MovieDbContext","withMovieDb","movieDb","TMDB_API_URL","MovieDB","addListener","listener","listeners","push","handleSearch","search","fetch","CONSTANTS","then","data","json","movies","results","numResults","total_results","console","log","forEach","component","forceUpdate","SearchBar","onChange","event","setState","target","name","value","onSubmit","preventDefault","state","type","placeholder","SearchResults","slice","on","snapshot","exists","val","Navbar","bg","Brand","Container","fluid","Row","Col","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Provider","MovieDb","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gYAEMA,EAAkBC,IAAMC,cAAc,MAE/BC,EAAe,SAACC,GAAD,OAAe,SAACC,GAAD,OACzC,kBAACL,EAAgBM,SAAjB,MACG,SAACC,GAAD,OAAc,kBAACH,EAAD,iBAAeC,EAAf,CAAsBE,SAAUA,UAIpCP,I,iBCPTQ,G,MAAS,CACbC,OAAQC,0CACRC,WAAYD,iCACZE,YAAaF,wCACbG,UAAWH,iBACXI,cAAeJ,6BACfK,kBAAmBL,eACnBM,MAAON,4CACPO,aAAcP,+iBAAYQ,2BA8BbC,EAxBb,aAAe,IAAD,gCAMdC,KAAO,SAACC,GAAD,OAAS,EAAKC,GAAGC,IAAR,gBAAqBF,KANvB,KAQdG,iBAAmB,WACjB,OAAO,EAAKJ,KAZQ,mBAYcK,MAAM,gBAT5B,KAYdC,YAAc,SAACC,GACb,OAAO,EAAKH,mBAAmBC,MAAME,IAbzB,KAedC,qBAAuB,SAACD,EAASE,EAAOC,EAAUC,GAChD,EAAKL,YAAYC,GAASK,IAAI,CAAEH,QAAOC,WAAUC,kBAhBrC,KAmBdE,0BAA4B,SAACN,GAC3B,EAAKD,YAAYC,GAASO,UAnB1BC,IAAIC,cAAc5B,GAClB6B,KAAKf,GAAKa,IAAIG,Y,gBCYHnC,G,MAAAA,GA1BD,SAACE,GAAW,IAChBkC,EAAsClC,EAAtCkC,GAAIC,EAAkCnC,EAAlCmC,MAAOC,EAA2BpC,EAA3BoC,aAAclC,EAAaF,EAAbE,SACzBsB,EAAwDW,EAAxDX,MAFe,EAEyCW,EAAjDV,gBAFQ,MAEG,GAFH,IAEyCU,EAAlCT,oBAFP,MAEsB,eAFtB,EAIvB,OACE,kBAACW,EAAA,EAAD,CAAMC,UAAU,qCACd,kBAACD,EAAA,EAAKE,KAAN,CAAWD,UAAU,oBACnB,kBAACD,EAAA,EAAKG,MAAN,KAAahB,GACb,kBAACa,EAAA,EAAKI,SAAN,CAAeH,UAAU,QAAQZ,GACjC,kBAACW,EAAA,EAAKK,KAAN,CAAWJ,UAAU,YAAYb,GACjC,kBAACkB,EAAA,EAAD,CACEL,UAAU,YACVM,QAAQ,UACRC,QAAS,kBACPT,EACIlC,EAAS0B,0BAA0BM,GACnChC,EAASqB,qBAAqBW,EAAIV,EAAOC,EAAUC,KAGxDU,EAAe,SAAW,aCGtBtC,G,MAAAA,GAtBS,SAACE,GAAW,IAC1B8C,EAAoB9C,EAApB8C,gBACFC,EAAOC,OAAOD,KAAKD,GACzB,OACE,6BACmB,IAAhBC,EAAKE,OACF,gDACAF,EAAKG,KAAI,SAACC,EAAKC,GAAN,OACP,6BACE,kBAAC,EAAD,CACElB,GAAIiB,EACJhB,MAAOW,EAAgBK,GACvBf,cAAc,IAGhB,sC,QClBRiB,EAAiBzD,IAAMC,cAAc,MAE9ByD,EAAc,SAACvD,GAAD,OAAe,SAACC,GAAD,OACxC,kBAACqD,EAAepD,SAAhB,MACG,SAACsD,GAAD,OAAa,kBAACxD,EAAD,iBAAeC,EAAf,CAAsBuD,QAASA,UAIlCF,I,QCVFG,EAAY,4DAAwDnD,oCCgClEoD,EA7Bb,aAAe,IAAD,gCAMdC,YAAc,SAACC,GACb,EAAKC,UAAUC,KAAKF,IAPR,KAWdG,aAAe,SAACC,GACO,GAAjBA,EAAOd,QACTe,MAAM,GAAD,OAAIC,EAAJ,kBAAoCF,IACtCG,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GACL,EAAKE,OAAL,YAAkBF,EAAKG,SACvB,EAAKC,WAAaJ,EAAKK,iBAExBN,MAAK,WACJO,QAAQC,IAAR,qBAA0B,EAAKH,gBAEhCL,MAAK,kBACJ,EAAKN,UAAUe,SAAQ,SAACC,GAAD,OAAeA,EAAUC,qBAtBtD7C,KAAKqC,OAAS,GACdrC,KAAKuC,WAAa,EAClBvC,KAAK4B,UAAY,ICoCNkB,G,MADGxB,E,kDAnChB,WAAYtD,GAAQ,IAAD,8BACjB,gBAIF+E,SAAW,SAACC,GACV,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SANjC,EASnBC,SAAW,SAACL,GACVA,EAAMM,iBACN,EAAKtF,MAAMuD,QAAQO,aAAa,EAAKyB,MAAMxB,SAT3C,EAAKwB,MAAQ,CAAExB,OAAQ,IAFN,E,qDAcT,IACAA,EAAW/B,KAAKuD,MAAhBxB,OAER,OACE,0BAAMsB,SAAUrD,KAAKqD,UACnB,2BACE/C,UAAU,aACV6C,KAAK,SACLC,MAAOrB,EACPgB,SAAU/C,KAAK+C,SACfS,KAAK,OACLC,YAAY,wBACX,IACH,kBAAC9C,EAAA,EAAD,CAAQC,QAAQ,eAAe4C,KAAK,UAApC,e,GA5BoB5F,IAAMG,aCiCnB2F,G,MADOpC,E,kDAjCpB,WAAYtD,GAAQ,wC,gEAKlBgC,KAAKhC,MAAMuD,QAAQG,YAAY1B,Q,+BAGvB,IAAD,OACHuC,EAAavC,KAAKhC,MAAMuD,QAAQgB,WACpC,OAAmB,IAAfA,EACK,kDAIP,6BACE,4BAAKA,EAAL,aACCvC,KAAKhC,MAAMuD,QAAQc,OAAOsB,MAAM,EAAG,IAAIzC,KAAI,SAACf,EAAOiB,GAAR,OAC1C,6BACE,kBAAC,EAAD,CACED,IAAKC,EACLlB,GAAIC,EAAMD,GACVC,MAAOA,EACPC,eAAgB,EAAKpC,MAAM8C,gBAAgBX,EAAMD,MAEnD,wBAAIiB,IAAKC,a,GA1BKrD,eC8CXD,I,kDAxCb,WAAYE,GAAQ,IAAD,8BACjB,gBACKuF,MAAQ,CACXzC,gBAAiB,IAHF,E,gEAOE,IAAD,OAClBd,KAAKhC,MAAME,SAASiB,mBAAmByE,GAAG,SAAS,SAACC,GAC9CA,EAASC,SACX,EAAKb,SAAS,CAAEnC,gBAAiB+C,EAASE,QAE1C,EAAKd,SAAS,CAAEnC,gBAAiB,U,+BAMrC,OACE,yBAAKR,UAAU,QACb,kBAAC0D,EAAA,EAAD,CAAQC,GAAG,OAAOrD,QAAQ,QACxB,kBAACoD,EAAA,EAAOE,MAAR,8BAEF,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAAC9D,UAAU,QACzB,kBAAC+D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6CACA,kBAAC,EAAD,CAAiBxD,gBAAiBd,KAAKuD,MAAMzC,mBAE/C,kBAACwD,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAexD,gBAAiBd,KAAKuD,MAAMzC,0B,GAhClC/C,cCORwG,MARf,WACE,OACE,yBAAKjE,UAAU,OACb,kBAAC,EAAD,QCEckE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAgBC,SAAjB,CAA0B5B,MAAO,IAAItE,GACnC,kBAAC,EAAekG,SAAhB,CAAyB5B,MAAO,IAAI6B,GAClC,kBAAC,EAAD,SAINC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.f430a1d5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = (Component) => (props) => (\n  <FirebaseContext.Consumer>\n    {(firebase) => <Component {...props} firebase={firebase} />}\n  </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;\n","import app from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurmentID: process.env.REACT_APP_MEASUREMENT_ID,\n};\n\nconst PREDEFINED_USER = \"PREDEFINED_USER\";\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n    this.db = app.database();\n  }\n\n  // --- User API --- //\n  user = (uid) => this.db.ref(`users/${uid}`);\n\n  getCollectionRef = () => {\n    return this.user(PREDEFINED_USER).child(\"/collection\");\n  };\n\n  getMovieRef = (movieID) => {\n    return this.getCollectionRef().child(movieID);\n  };\n  addMovieToCollection = (movieID, title, overview, release_date) => {\n    this.getMovieRef(movieID).set({ title, overview, release_date });\n  };\n\n  removeMovieFromCollection = (movieID) => {\n    this.getMovieRef(movieID).remove();\n  };\n}\n\nexport default Firebase;\n","import React from \"react\";\nimport { withFirebase } from \"../Firebase\";\nimport { Button, Card } from \"react-bootstrap\";\nimport \"./MovieCard.css\";\n\nconst Movie = (props) => {\n  const { id, movie, inCollection, firebase } = props;\n  const { title, overview = \"\", release_date = \"Unknown Date\" } = movie;\n\n  return (\n    <Card className=\"bg-secondary text-white movieCard\">\n      <Card.Body className=\"movieCardContent\">\n        <Card.Title>{title}</Card.Title>\n        <Card.Subtitle className=\"mb-2\">{release_date}</Card.Subtitle>\n        <Card.Text className=\"overview\">{overview}</Card.Text>\n        <Button\n          className=\"colButton\"\n          variant=\"primary\"\n          onClick={() =>\n            inCollection\n              ? firebase.removeMovieFromCollection(id)\n              : firebase.addMovieToCollection(id, title, overview, release_date)\n          }\n        >\n          {inCollection ? \"Remove\" : \"Add\"}\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default withFirebase(Movie);\n","import React from \"react\";\nimport { withFirebase } from \"../Firebase/context\";\nimport MovieCard from \"./MovieCard\";\nimport \"./MovieCollection.css\";\n\nconst MovieCollection = (props) => {\n  const { movieCollection } = props;\n  const keys = Object.keys(movieCollection);\n  return (\n    <div>\n      {keys.length === 0\n        ? \"Search for a movie to add to your collection.\"\n        : keys.map((key, i) => (\n            <div>\n              <MovieCard\n                id={key}\n                movie={movieCollection[key]}\n                inCollection={true}\n              />\n\n              <br />\n            </div>\n          ))}\n    </div>\n  );\n};\n\nexport default withFirebase(MovieCollection);\n","import React from \"react\";\n\nconst MovieDbContext = React.createContext(null);\n\nexport const withMovieDb = (Component) => (props) => (\n  <MovieDbContext.Consumer>\n    {(movieDb) => <Component {...props} movieDb={movieDb} />}\n  </MovieDbContext.Consumer>\n);\n\nexport default MovieDbContext;\n","export const TMDB_API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}`;\n","import * as CONSTANTS from \"../../Constants/constants\";\n\nclass MovieDB {\n  constructor() {\n    this.movies = [];\n    this.numResults = 0;\n    this.listeners = [];\n  }\n\n  addListener = (listener) => {\n    this.listeners.push(listener);\n  };\n\n  // --- TMDB API --- //\n  handleSearch = (search) => {\n    if (search.length != 0) {\n      fetch(`${CONSTANTS.TMDB_API_URL}&query=${search}`)\n        .then((data) => data.json())\n        .then((data) => {\n          this.movies = [...data.results];\n          this.numResults = data.total_results;\n        })\n        .then(() => {\n          console.log(`NumResults:${this.numResults}`);\n        })\n        .then(() =>\n          this.listeners.forEach((component) => component.forceUpdate())\n        );\n    }\n  };\n}\n\nexport default MovieDB;\n","import React from \"react\";\nimport { withMovieDb } from \"../MovieDB\";\nimport { Button } from \"react-bootstrap\";\nimport \"./SearchBar.css\";\n\nclass SearchBarBase extends React.Component {\n  constructor(props) {\n    super();\n    this.state = { search: \"\" };\n  }\n\n  onChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    this.props.movieDb.handleSearch(this.state.search);\n  };\n\n  render() {\n    const { search } = this.state;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          className=\"search_bar\"\n          name=\"search\"\n          value={search}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Search for movie...\"\n        />{\" \"}\n        <Button variant=\"outline-dark\" type=\"submit\">\n          Search\n        </Button>\n      </form>\n    );\n  }\n}\n\nconst SearchBar = withMovieDb(SearchBarBase);\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport { withMovieDb } from \"../MovieDB\";\nimport MovieCard from \"./MovieCard\";\nclass ResultsBase extends Component {\n  constructor(props) {\n    super();\n  }\n\n  componentDidMount() {\n    this.props.movieDb.addListener(this);\n  }\n\n  render() {\n    let numResults = this.props.movieDb.numResults;\n    if (numResults === 0) {\n      return <h1>No search results.</h1>;\n    }\n\n    return (\n      <div>\n        <h1>{numResults} Results.</h1>\n        {this.props.movieDb.movies.slice(0, 11).map((movie, i) => (\n          <div>\n            <MovieCard\n              key={i}\n              id={movie.id}\n              movie={movie}\n              inCollection={!!this.props.movieCollection[movie.id]}\n            />\n            <br key={i} />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst SearchResults = withMovieDb(ResultsBase);\nexport default SearchResults;\n","import React, { Component } from \"react\";\nimport { Col, Container, Row, Navbar } from \"react-bootstrap\";\nimport { withFirebase } from \"../Firebase/context\";\nimport MovieCollection from \"./MovieCollection\";\nimport SearchBar from \"./SearchBar\";\nimport \"./home.css\";\nimport SearchResults from \"./SearchResults\";\n\nclass HomePage extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      movieCollection: {},\n    };\n  }\n\n  componentDidMount() {\n    this.props.firebase.getCollectionRef().on(\"value\", (snapshot) => {\n      if (snapshot.exists()) {\n        this.setState({ movieCollection: snapshot.val() });\n      } else {\n        this.setState({ movieCollection: {} });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"home\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>Movie Collection App</Navbar.Brand>\n        </Navbar>\n        <Container fluid className=\"main\">\n          <Row>\n            <Col>\n              <h1>My Collection</h1>\n              <MovieCollection movieCollection={this.state.movieCollection} />\n            </Col>\n            <Col>\n              <SearchBar />\n              <SearchResults movieCollection={this.state.movieCollection} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withFirebase(HomePage);\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./Home/home\";\n\n// import * as ROUTES from \"../constants/routes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport MovieDb from \"./Components/MovieDB/movieDb\";\nimport MovieDbContext from \"./Components/MovieDB/context\";\n\nimport Firebase from \"./Components/Firebase/firebase\";\nimport FirebaseContext from \"./Components/Firebase/context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseContext.Provider value={new Firebase()}>\n      <MovieDbContext.Provider value={new MovieDb()}>\n        <App />\n      </MovieDbContext.Provider>\n    </FirebaseContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}